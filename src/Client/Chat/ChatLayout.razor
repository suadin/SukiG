@if (!isClosed)
{
    <div class="chatroom-component d-flex flex-column flex-gap-6 align-items-stretch">
        <div class="chatroom-messages d-flex flex-column align-items-start p-2 flex-fill">
            @foreach (var item in formatedChatMessages)
            {
                <div class="@item.CssClasses">@item.TextMessage</div>
            }
            <div id="chat-end"></div>
        </div>
        <div class="chatroom-input d-flex flex-column mt-auto flex-gap-6">
            <input class="chatroom-textbox" type="text" placeholder="Enter text to write message or /help to see available commands." @onkeyup="@EnterAsync" @bind="@newMessage" />
        </div>
    </div>
}

@using SukiG.Shared.Chat;
@using SukiG.Shared.TicTacToe;
@implements IChatMessagePrinter;
@inject NavigationManager navigationManager;
@inject IJSRuntime jsRuntime;
@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    string userName;

    // init chat
    private ChatClient chat;
    private string hubUri { get { return navigationManager.BaseUri.TrimEnd('/') + "/chat"; } }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        userName = authState.User.Identity.Name;
        var hub = new ChatClientHub(userName);
        var handler = new ChatMessageHandler(hub, new ChatFunc[] { new TicTacToeChatCommandFunc() });
        var printer = this;
        chat = new ChatClient(hub, handler, printer);
        var hubUri = navigationManager.BaseUri.TrimEnd('/') + "/chat";
        await chat.Login(hubUri);
    }

    // add funcs
    public void AddCommandFuncs(IList<ChatFunc> additionalFuncs)
    {
        // TODO
        //commandFuncs = new[] { new ChatFunc(helpCommandFunc, helpCommandPattern) }.Concat(additionalFuncs);
        //commandHandler = new ChatCommandHandler(commandFuncs);
    }

    // handle input
    private string newMessage;
    private async Task EnterAsync(KeyboardEventArgs e) => await chat.HandleChatMessage(new ChatMessage(userName, newMessage, e.Code));

    // print chat messages
    private List<FormatedChatMessage> formatedChatMessages = new List<FormatedChatMessage>();
    void IChatMessagePrinter.PrintChatMessage(IList<ChatMessage> chatMessages)
    {
        foreach (var chatMessage in chatMessages)
        {
            newMessage = string.Empty;

            switch (chatMessage.UserName)
            {
                case ChatClient.CLEAR_USER:
                    formatedChatMessages.Clear();
                    break;
                case ChatClient.INFO_USER:
                    formatedChatMessages.Add(new FormatedChatMessage(chatMessage.TextMessage, "infoChatMessage"));
                    break;
                case ChatClient.ERROR_USER:
                    formatedChatMessages.Add(new FormatedChatMessage(chatMessage.TextMessage, "errorChatMessage"));
                    break;
                default:
                    formatedChatMessages.Add(new FormatedChatMessage($"{chatMessage.UserName}: {chatMessage.TextMessage}", "defaultChatMessage"));
                    break;
            }
        }

        StateHasChanged();
    }

    // auto scroll to newest message
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            await jsRuntime.InvokeVoidAsync("scrollToFragment", "chat-end");
    }

    // open and close chat
    private bool isClosed = false;
    public async Task ToggleChat()
    {
        isClosed = !isClosed;
        if (isClosed)
            await chat.Logout();
        else
            await chat.Login(hubUri);
        StateHasChanged();
    }

    //public void DrawGameResult(TicTacToePlayer winner)
    //{
    //    this.chatMessages.Add(new Message("TicTacToe", $"Winner: {winner.ToString()}", false));
    //}

    // rename
    //public async Task Rename(string newUserName, bool isFirstTime = false)
    //{
    //    userName = newUserName;
    //    await hubConnection.SendAsync("Rename", newUserName);
    //    if (!isFirstTime)
    //    {
    //        chatMessages.Add(new Message("suadin.de", $"[Notice] you are renamed to '{newUserName}'", false));
    //        StateHasChanged();
    //    }
    //}

    // userlist
    //public async Task List() => await hubConnection.SendAsync("UserList");
    //private void UserListMessage(IList<string> userList)
    //{
    //    chatMessages.Add(new Message("", $"[Notice] {string.Join(" | ", userList)}", false));
    //    StateHasChanged();
    //}
}