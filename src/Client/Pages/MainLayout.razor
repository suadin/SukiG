@inherits LayoutComponentBase
<div class="page">
    <div class="main d-flex flex-column">
        <div class="d-flex flex-row flex-gap-4" style="border-bottom-style: dashed; border-bottom-width: 4px; padding-bottom: 2px;">
            <!-- chatroom control -->
            <button title="open/close chat" class="btn btn-primary" @onclick="@ToggleChat"><span class="oi oi-chat"></span></button>
        </div>
        <div class="content p-2 flex-fill">@Body</div>
        <ChatLayout @ref="chatLayout"></ChatLayout>
    </div>
</div>

@using SukiG.Client.Chat;
@code {
    // init
    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        chatRoom.AddCommandFuncs(new[]{
    //            new ChatCommandFunc(CloseFunc, "close"),
    //            new ChatCommandFunc(RenameFunc, "rename <newUserName>"),
    //            new ChatCommandFunc(UserListFunc, "list"),
    //            new TicTacToeChatCommandFunc(chatRoom)
    //        });
    //    }
    //}

    // chatroom
    private ChatLayout chatLayout = new ChatLayout();
    private async Task ToggleChat() => await chatLayout.ToggleChat();
    //private ChatCommandResult CloseFunc(string[] commandParams)
    //{
    //    if (commandParams.Length == 1 && commandParams[0] == "close")
    //    {
    //        ToggleChat();
    //        return ChatCommandResult.Executed;
    //    }
    //    return ChatCommandResult.Ignored;
    //}
    //private ChatCommandResult RenameFunc(string[] commandParams)
    //{
    //    if (commandParams.Length == 2 && commandParams[0] == "rename")
    //    {
    //        chatRoom.Rename(commandParams[1]);
    //        return ChatCommandResult.Executed;
    //    }
    //    return ChatCommandResult.Ignored;
    //}
    //private ChatCommandResult UserListFunc(string[] commandParams)
    //{
    //    if (commandParams.Length == 1 && commandParams[0] == "list")
    //    {
    //        chatRoom.List();
    //        return ChatCommandResult.Executed;
    //    }
    //    return ChatCommandResult.Ignored;
    //}
}