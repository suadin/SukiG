@page "/chatroom"
<div class="chatroom-component d-flex align-items-start flex-column">
    <!-- chat -->
    <div class="chatroom-messages d-flex flex-column align-items-start p-2 flex-fill">
        @foreach (var item in chatMessages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div>
                    <span class="user"><strong>@item.Username</strong></span>
                    <span><strong>:&nbsp;</strong></span>
                    <span class="msg">@item.Body</span>
                </div>
            }
        }
        <div id="chat-end"></div>
    </div>
    <div class="chatroom-input d-flex flex-column mt-auto flex-gap-6">
        <input class="chatroom-textbox" type="text" placeholder="enter text to write message" @onkeyup="@EnterAsync" @bind="@newMessage" />
    </div>
</div>

@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager navigationManager;
@inject IJSRuntime jsRuntime;
@code {
    // login
    private string userName = "Guest-" + new Random().Next(100000, 999999);
    private HubConnection hubConnection;
    public ChatRoom() => Login();
    public async Task Login()
    {
        if (string.IsNullOrWhiteSpace(userName))
            return;

        try
        {
            await Task.Delay(1);
            chatMessages.Clear();
            hubConnection = new HubConnectionBuilder().WithUrl(navigationManager.BaseUri.TrimEnd('/') + "/chat").Build();
            hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            await hubConnection.StartAsync();
            await SendAsync($"[Notice] {userName} joined chat room.");
        }
        catch (Exception e)
        {
            await SendAsync($"[Error] {userName} cannot joined chat room.");
        }
    }

    //logout
    private async Task Logout()
    {
        if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
        {
            await SendAsync($"[Notice] {userName} left chat room.");
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            hubConnection = null;
        }
    }

    // chat
    private string newMessage;
    private List<Message> chatMessages = new List<Message>();
    private async Task EnterAsync(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await SendAsync(newMessage);
        }
    }
    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await hubConnection.SendAsync("Broadcast", userName, message);
            newMessage = string.Empty;
        }
    }
    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(userName, StringComparison.OrdinalIgnoreCase);
        chatMessages.Add(new Message(name, message, isMine));
        StateHasChanged();
    }
    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }
        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public bool IsNotice => Body.StartsWith("[Notice]");
        public string CSS => Mine ? "sent" : "received";
    }
    protected override async Task OnAfterRenderAsync(bool firstRender) => await jsRuntime.InvokeVoidAsync("scrollToFragment", "chat-end");

    // chat-position
    [Parameter] public bool IsClosed { get; set; } = false;
    [Parameter] public Action<bool> IsClosedChanged { get; set; }
    private void Close()
    {
        IsClosed = true;
        IsClosedChanged.Invoke(IsClosed);
    }
}