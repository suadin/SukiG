@using System.Security.Claims
@inherits LayoutComponentBase
<div class="page">
    <div class="main d-flex flex-column">
        <div class="d-flex flex-row flex-gap-4" style="border-bottom-style: dashed; border-bottom-width: 4px; padding-bottom: 2px;">
            <LoginDisplay />
            <!-- chatroom control -->
            <AuthorizeView>
                <Authorized>
                    @if (chatLayout.IsClosed)
                    {
                        <button title="open chat" class="btn btn-primary" @onclick="@ToggleChat"><span class="oi oi-chat"></span></button>
                    }
                    else
                    {
                        <button title="close chat" class="btn btn-danger" @onclick="@ToggleChat"><span class="oi oi-chat"></span></button>
                    }
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="content p-2 flex-fill">@Body</div>
        <AuthorizeView>
            <Authorized>
                <ChatLayout @ref="chatLayout"></ChatLayout>
            </Authorized>
        </AuthorizeView>
        <div class="d-flex flex-row flex-gap-4" style="border-top-style: dashed; border-top-width: 4px; padding-top: 2px;">
            <span>@Title</span>
        </div>
    </div>
</div>

@using SukiG.Shared.Model;
@using SukiG.Client.Chat;
@using System.Net.Http;
@inject NavigationManager navigationManager;
@inject HttpClient httpClient;
@code {
    // init
    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        chatRoom.AddCommandFuncs(new[]{
    //            new ChatCommandFunc(CloseFunc, "close"),
    //            new ChatCommandFunc(RenameFunc, "rename <newUserName>"),
    //            new ChatCommandFunc(UserListFunc, "list"),
    //            new TicTacToeChatCommandFunc(chatRoom)
    //        });
    //    }
    //}

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    public string Title = "suadin.de";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        if (authState.User.Identity.IsAuthenticated)
        {
            var userUri = navigationManager.BaseUri.TrimEnd('/') + "/api/user";
            var user = await httpClient.GetStringAsync($"{userUri}?name={authState.User.Identity.Name}");

            if (user == null)
            {
                var response = await httpClient.PostAsJsonAsync(userUri, new User { Name = authState.User.Identity.Name });
                if (!response.IsSuccessStatusCode)
                    throw new Exception("Error occues while save new user into database.");
            }
        }

        var titleUri = navigationManager.BaseUri.TrimEnd('/') + "/api/main/title";
        Title = await httpClient.GetStringAsync(titleUri);
    }

    // chatroom
    private ChatLayout chatLayout = new ChatLayout();
    private async Task ToggleChat() => await chatLayout.ToggleChat();
    //private ChatCommandResult CloseFunc(string[] commandParams)
    //{
    //    if (commandParams.Length == 1 && commandParams[0] == "close")
    //    {
    //        ToggleChat();
    //        return ChatCommandResult.Executed;
    //    }
    //    return ChatCommandResult.Ignored;
    //}
    //private ChatCommandResult RenameFunc(string[] commandParams)
    //{
    //    if (commandParams.Length == 2 && commandParams[0] == "rename")
    //    {
    //        chatRoom.Rename(commandParams[1]);
    //        return ChatCommandResult.Executed;
    //    }
    //    return ChatCommandResult.Ignored;
    //}
    //private ChatCommandResult UserListFunc(string[] commandParams)
    //{
    //    if (commandParams.Length == 1 && commandParams[0] == "list")
    //    {
    //        chatRoom.List();
    //        return ChatCommandResult.Executed;
    //    }
    //    return ChatCommandResult.Ignored;
    //}
}