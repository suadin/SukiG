@if (!isClosed)
{
    <div class="chatroom-component d-flex flex-column flex-gap-6 align-items-stretch">
        <div class="chatroom-messages d-flex flex-column align-items-start p-2 flex-fill">
            @foreach (var item in chatMessages)
            {
                @if (item.IsNotice)
                {
                    <div class="alert alert-info">@item.Body</div>
                }
                else
                {
                    <div>
                        <span class="user"><strong>@item.Username</strong></span>
                        <span><strong>:&nbsp;</strong></span>
                        <span class="msg">@item.Body</span>
                    </div>
                }
            }
            <div id="chat-end"></div>
        </div>
        <div class="chatroom-input d-flex flex-column mt-auto flex-gap-6">
            <input class="chatroom-textbox" type="text" placeholder="enter text to write message" @onkeyup="@EnterAsync" @bind="@newMessage" />
        </div>
    </div>
}

@using SukiG.Shared.ChatCommand;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager navigationManager;
@inject IJSRuntime jsRuntime;
@code {
    // init
    protected override async Task OnInitializedAsync() => await Login();
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
        {
            await jsRuntime.InvokeVoidAsync("scrollToFragment", "chat-end");
        }
    }

    // commands
    private ChatCommandHandler commandHandler;
    private IEnumerable<ChatCommandFunc> commandFuncs;
    private string helpCommandPattern = "help";
    private ChatCommandResult helpCommandFunc(string[] commandParameter)
    {
        if(commandParameter.Length == 1 && commandParameter[0] == "help")
        {
            var helpMessage = string.Join(" | ", commandFuncs.Select(c => c.CommandPattern));
            chatMessages.Add(new Message("suadin.de", $"[Notice] {helpMessage}", false));
            return ChatCommandResult.Executed;
        }

        return ChatCommandResult.Ignored;
    }
    public void AddCommandFuncs(IEnumerable<ChatCommandFunc> newCommandFuncs)
    {
        commandFuncs = new[] { new ChatCommandFunc(helpCommandFunc, helpCommandPattern) }.Concat(newCommandFuncs);
        commandHandler = new ChatCommandHandler(commandFuncs);
    }

    // login
    private string userName;
    private HubConnection hubConnection;
    public async Task Login()
    {
        try
        {
            await Task.Delay(1);
            chatMessages.Clear();
            hubConnection = new HubConnectionBuilder().WithUrl(navigationManager.BaseUri.TrimEnd('/') + "/chatroom").Build();
            hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            hubConnection.On<IList<string>>("UserList", UserListMessage);
            await hubConnection.StartAsync();
            await Rename("Guest-" + new Random().Next(100000, 999999), true);
            await SendAsync($"[Notice] {userName} joined chat room.");
        }
        catch (Exception)
        {
            await SendAsync($"[Error] {userName} cannot joined chat room.");
        }
    }

    //logout
    public async Task Logout()
    {
        if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
        {
            await SendAsync($"[Notice] {userName} left chat room.");
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            hubConnection = null;
        }
    }

    // chat
    private string newMessage;
    private List<Message> chatMessages = new List<Message>();
    private async Task EnterAsync(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await SendAsync(newMessage);
        }
    }
    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            var commandResult = commandHandler == null ? ChatCommandResult.Ignored : (await commandHandler?.Handle(message));
            switch (commandResult)
            {
                case ChatCommandResult.Ignored:
                    await hubConnection.SendAsync("Broadcast", userName, message);
                    break;
                case ChatCommandResult.Executed:
                    // command function handles output
                    break;
                case ChatCommandResult.Failed:
                    chatMessages.Add(new Message("suadin.de", $"[Error] command '{message}' failed! Use '/help' to list commands", false));
                    break;
            }
        }

        newMessage = string.Empty;
    }
    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(userName, StringComparison.OrdinalIgnoreCase);
        chatMessages.Add(new Message(name, message, isMine));
        StateHasChanged();
    }
    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }
        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public bool IsNotice => Body.StartsWith("[Notice]") || Body.StartsWith("[Error]");
        public string CSS => Mine ? "sent" : "received";
    }

    // open/close
    private bool isClosed = false;
    public async Task ToggleChat()
    {
        isClosed = !isClosed;
        if (isClosed)
            await Logout();
        else
            await Login();
        StateHasChanged();
    }

    // rename
    public async Task Rename(string newUserName, bool isFirstTime = false)
    {
        userName = newUserName;
        await hubConnection.SendAsync("Rename", newUserName);
        if (!isFirstTime)
        {
            chatMessages.Add(new Message("suadin.de", $"[Notice] you are renamed to '{newUserName}'", false));
            StateHasChanged();
        }
    }

    // userlist
    public async Task List() => await hubConnection.SendAsync("UserList");
    private void UserListMessage(IList<string> userList)
    {
        chatMessages.Add(new Message("", $"[Notice] {string.Join(" | ", userList)}", false));
        StateHasChanged();
    }
}